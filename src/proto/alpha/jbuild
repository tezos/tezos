(jbuild_version 1)

(rule
 ((targets (environment.ml))
  (action
    (write-file ${@}
      "include Tezos_protocol_environment.Make(struct let name = \"alpha\" end)()"))))

(rule
 ((targets (registerer.ml))
  (action
    (write-file ${@}
       "
let () =
  let module Ignored = State.Register_embedded_protocol
    (Tezos_protocol_environment_alpha.Environment)
    (Tezos_embedded_raw_protocol_alpha.Main)
    (struct
       let hash =
         Some (Hash.Protocol_hash.of_b58check_exn
                 \"ProtoALphaALphaALphaALphaALphaALphaALphaALphaDdp3zK\")
       let sources = Tezos_data.Protocol.{
         expected_env = V1 ;
         components = [(* FIXME ?? *)] ;
    } end) in ()"))))

(library
  ((name tezos_protocol_environment_alpha)
   (public_name tezos.protocol_environment.alpha)
   (library_flags (:standard -linkall))
   (libraries (node_updater))
   (modules (Environment))))

(library
  ((name tezos_embedded_raw_protocol_alpha)
   (public_name tezos.embedded_raw_protocol.alpha)
   (libraries (tezos_protocol_environment_alpha))
   (library_flags (:standard -linkall))
   (flags (:standard -nopervasives -nostdlib
                     -w +a-4-6-7-9-29-40..42-44-45-48
                     -warn-error -a+8
                     -open Tezos_protocol_environment_alpha__Environment
                     -open Error_monad
                     -open Hash
                     -open Tezos_data))
   (modules (:standard \ Environment Registerer))))

(library
  ((name tezos_embedded_protocol_alpha)
   (public_name tezos.embedded_protocol.alpha)
   (library_flags (:standard -linkall))
   (libraries (tezos_embedded_raw_protocol_alpha node_shell))
   (modules (Registerer))))

(alias
 ((name runtest_sandboxing)
  (deps ((glob_files *.ml)
         (glob_files *.mli)
         TEZOS_PROTOCOL))
  (action (run ${exe:../../compiler_main.exe} dummy_alpha ${path-no-dep:.}))))
